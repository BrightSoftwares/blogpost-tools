# importing the module
from datetime import datetime
from youtube_transcript_api import YouTubeTranscriptApi
import frontmatter
import os
from urllib.parse import urlparse, parse_qs
from slugify import slugify


def get_yt_video_transcript(video_id, language='en'):
    # retrieve the available transcripts
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

    # iterate over all available transcripts
    # for transcript in transcript_list:

    #     # the Transcript object provides metadata
    #     # properties
    #     print(
    #         transcript.video_id,
    #         transcript.language,
    #         transcript.language_code,

    #         # whether it has been manually created or
    #         # generated by YouTube
    #         transcript.is_generated,

    #         # whether this transcript can be translated
    #         # or not
    #         transcript.is_translatable,

    #         # a list of languages the transcript can be
    #         # translated to
    #         transcript.translation_languages,
    #     )

    #     # fetch the actual transcript data
    #     print(transcript.fetch())

    #     # translating the transcript will return another
    #     # transcript object
    #     print(transcript.translate(language).fetch())
    #     print(transcript.translate(language).fetch()[0]['text'])

    # you can also directly filter for the language you are
    # looking for, using the transcript list
    # transcript = transcript_list.find_transcript([language])
    transcript = transcript_list.find_generated_transcript([language])

    transcript_data = transcript.fetch()
    # print(transcript_data)

    # or just filter for manually created transcripts
    # transcript = transcript_list.find_manually_created_transcript([language])

    # return transcript
    # return transcript.translate(language).fetch()[0]['text']

    transcript_data_string = ""
    for line in transcript_data:
        print(line['text'])
        transcript_data_string += "{}\n".format(line['text'])

    return transcript_data_string


def get_yt_video_id(url):
    """Returns Video_ID extracting from the given url of Youtube

    Examples of URLs:
      Valid:
        'http://youtu.be/_lOT2p_FCvA',
        'www.youtube.com/watch?v=_lOT2p_FCvA&feature=feedu',
        'http://www.youtube.com/embed/_lOT2p_FCvA',
        'http://www.youtube.com/v/_lOT2p_FCvA?version=3&amp;hl=en_US',
        'https://www.youtube.com/watch?v=rTHlyTphWP0&index=6&list=PLjeDyYvG6-40qawYNR4juzvSOg-ezZ2a6',
        'youtube.com/watch?v=_lOT2p_FCvA',

      Invalid:
        'youtu.be/watch?v=_lOT2p_FCvA',
    """

    if url.startswith(('youtu', 'www')):
        url = 'http://' + url

    query = urlparse(url)

    if 'youtube' in query.hostname:
        if query.path == '/watch':
            return parse_qs(query.query)['v'][0]
        elif query.path.startswith(('/embed/', '/v/')):
            return query.path.split('/')[2]
    elif 'youtu.be' in query.hostname:
        return query.path[1:]
    else:
        raise ValueError


#folder = '../../en/_drafts/'
folder = os.getenv('INPUT_DRAFTS_PATH')
entries = os.listdir(folder)
for entry in entries:
    # print(entry)
    try:
        # For each file
        # set the date to now if not defined
        # add a tag pretified = true
        # if title is not defined, get it from the youtube video
        # slugify the title into the filename
        #

        post = frontmatter.load(folder + "/" + entry)
        title = post['title'] if 'title' in post else None
        # ytvideo_url = post['youtube_video'] if 'youtube_video' in post else None
        pretified = post['pretified'] if 'pretified' in post else None
        post_date = post['date'] if 'date' in post else None

        if pretified is not True and title is not None:

            if post_date is None:
                post_date = datetime.now()
                post['date'] = post_date

            oldfilename = "{}/{}".format(folder, entry)
            newfilename = "{}/{}-{}".format(folder, post_date.strftime("%Y-%m-%d"),
                                            slugify(title.lower()))

            print("Saving the content of the file")
            filecontent = frontmatter.dumps(post)
            with open(oldfilename, 'w') as f:
                f.write(filecontent)

            print("Renaming the file to the correct file name")
            os.rename(oldfilename, newfilename)

            # transcription = ""
            # try:
            #     print("Getting video ID from url ", ytvideo_url)
            #     ytvideo = get_yt_video_id(ytvideo_url)

            #     print("Found a post {} with a youtube video to transcribe. Video id = {}".format(
            #         title, ytvideo))
            #     # print("Content is =", post.content.strip())
            #     transcription = get_yt_video_transcript(ytvideo, lang)
            #     #post['transcribed'] = True
            #     transcribed = True
            #     post['youtube_video_id'] = ytvideo
            #     post.content = transcription

            #     # print(filecontent)

            # except Exception as e1:
            #     transcription = "An error occured while trying to get transcript. Error: {}".format(
            #         str(e1))
            #     post.content = transcription
            #     print(transcription)
            # finally:
            #     print("Adding/Update the tags")
            #     # post['title'] = title
            #     post['pretified'] = pretified
            #     post['date'] = post_date
            #     print("Saving the content of the file")
            #     filecontent = frontmatter.dumps(post)
            #     with open(folder + "/" + entry, 'w') as f:
            #         f.write(filecontent)
        else:
            print("Did not process this file because Pretified = True ({}) or title was None ()".format(
                pretified, title))

    except Exception as e:
        print("Error. = ", str(e))
