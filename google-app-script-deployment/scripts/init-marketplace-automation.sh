#!/bin/bash
# Google Apps Script Marketplace Automation - Initialization Script
# This script sets up your repository for automated marketplace deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Print functions
print_header() {
    echo -e "\n${BOLD}${BLUE}===========================================================${NC}"
    echo -e "${BOLD}${BLUE}$1${NC}"
    echo -e "${BOLD}${BLUE}===========================================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Banner
echo -e "${BOLD}${BLUE}"
cat << "EOF"
╔═══════════════════════════════════════════════════════════╗
║                                                           ║
║   Google Apps Script Marketplace Automation Setup        ║
║                                                           ║
╚═══════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check if in git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository. Please run this script from your project root."
    exit 1
fi

print_success "Git repository detected"

# Collect information
print_header "Project Information"

read -p "Add-on ID (alphanumeric and hyphens only): " ADDON_ID
read -p "Add-on Name: " ADDON_NAME
read -p "Apps Script Project ID (from script.google.com): " SCRIPT_ID
read -p "Support Email: " SUPPORT_EMAIL
read -p "Privacy Policy URL (https://...): " PRIVACY_URL
read -p "Terms of Service URL (https://...): " TERMS_URL

# Validate inputs
if [[ ! "$ADDON_ID" =~ ^[a-z0-9-]+$ ]]; then
    print_error "Add-on ID must contain only lowercase letters, numbers, and hyphens"
    exit 1
fi

if [[ ! "$SCRIPT_ID" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    print_error "Invalid Apps Script Project ID format"
    exit 1
fi

if [[ ! "$PRIVACY_URL" =~ ^https:// ]] || [[ ! "$TERMS_URL" =~ ^https:// ]]; then
    print_error "URLs must start with https://"
    exit 1
fi

print_success "All inputs validated"

# Create directory structure
print_header "Creating Directory Structure"

mkdir -p .github/workflows
mkdir -p marketplace
mkdir -p scripts
mkdir -p templates

print_success "Directories created"

# Create base configuration
print_header "Creating Configuration Files"

cat > marketplace-config.yaml << EOF
# Google Apps Script Marketplace Configuration
# Generated by init-marketplace-automation.sh

project:
  id: "$ADDON_ID"
  name: "$ADDON_NAME"
  script_id: "$SCRIPT_ID"

gcp:
  strategy: "reuse"
  labels:
    environment: "production"

auth:
  method: "service_account"

oauth_consent:
  user_type: "external"
  support_email: "$SUPPORT_EMAIL"
  privacy_policy_url: "$PRIVACY_URL"
  terms_of_service_url: "$TERMS_URL"
  auto_configure_scopes: true
  domain_verification:
    enabled: true
    domain: "$(echo $PRIVACY_URL | sed -E 's|https?://([^/]+).*|\1|')"

marketplace:
  default_language: "en"
  asset_location: "external"
  
  assets:
    icon:
      external_url: "https://example.com/icon.png"  # TODO: Update with your icon URL
    
    screenshots:
      - external_url: "https://example.com/screenshot1.png"  # TODO: Update
        caption:
          en: "Main feature screenshot"
      - external_url: "https://example.com/screenshot2.png"  # TODO: Update
        caption:
          en: "Settings panel"
  
  content:
    tagline:
      en: "Your tagline here"  # TODO: Update
    
    description:
      en: |
        # $ADDON_NAME
        
        ## Features
        - Feature 1
        - Feature 2
        - Feature 3
        
        ## Getting Started
        1. Install the add-on
        2. Configure settings
        3. Start using!

deployment:
  environment: "production"
  versioning: "head"
  testing_phase: "direct"

apis:
  required:
    - name: "script.googleapis.com"
      display_name: "Apps Script API"
      free_tier: true
    - name: "cloudresourcemanager.googleapis.com"
      display_name: "Cloud Resource Manager API"
      free_tier: true
    - name: "iamcredentials.googleapis.com"
      display_name: "IAM Service Account Credentials API"
      free_tier: true
    - name: "serviceusage.googleapis.com"
      display_name: "Service Usage API"
      free_tier: true

rollback:
  enabled: true
  keep_versions: 5
  create_backup: true

notifications:
  create_issue_on_rejection: true
  issue_labels:
    - "marketplace-rejection"
    - "deployment"

retry:
  enabled: true
  max_attempts: 3
  initial_delay: 5
  backoff_multiplier: 2
  max_delay: 60

validation:
  enabled: true
  strict: false
  required_files:
    - "appsscript.json"
    - "Code.gs"
  validate_assets: true
EOF

print_success "Created marketplace-config.yaml"

# Create .gitignore entries
print_info "Updating .gitignore"

if [ -f .gitignore ]; then
    if ! grep -q "\.marketplace-submissions\.json" .gitignore; then
        cat >> .gitignore << EOF

# Marketplace automation
.marketplace-submissions.json
sa-key.json
.clasp.json
EOF
        print_success "Updated .gitignore"
    else
        print_info ".gitignore already contains marketplace entries"
    fi
else
    cat > .gitignore << EOF
# Marketplace automation
.marketplace-submissions.json
sa-key.json
.clasp.json

# Node modules
node_modules/

# Python
__pycache__/
*.py[cod]
*$py.class
.venv/
venv/

# IDE
.vscode/
.idea/
*.swp
*.swo
EOF
    print_success "Created .gitignore"
fi

# Create README
if [ ! -f README.md ]; then
    cat > README.md << EOF
# $ADDON_NAME

## Description

[Add your add-on description here]

## Installation

This add-on is available in the Google Workspace Marketplace:

[Link will be added after publication]

## Development

### Prerequisites

- Google Cloud Platform account
- GitHub repository
- Apps Script project

### Setup

1. Install dependencies:
   \`\`\`bash
   pip install -r requirements.txt
   npm install -g @google/clasp
   \`\`\`

2. Configure GitHub Secrets:
   - \`GCP_SERVICE_ACCOUNT_KEY\`

3. Validate setup:
   \`\`\`bash
   python scripts/validate-setup.py
   \`\`\`

### Deployment

Deploy via git tag:
\`\`\`bash
git tag v1.0.0
git push origin v1.0.0
\`\`\`

## License

[Add your license here]

## Support

For support, email: $SUPPORT_EMAIL
EOF
    print_success "Created README.md"
else
    print_info "README.md already exists, skipping"
fi

# Create requirements.txt
cat > requirements.txt << EOF
pyyaml>=6.0
google-auth>=2.23.0
google-auth-oauthlib>=1.1.0
google-auth-httplib2>=0.1.1
google-api-python-client>=2.100.0
Pillow>=10.0.0
requests>=2.31.0
EOF

print_success "Created requirements.txt"

# Create marketplace submission tracker
cat > .marketplace-submissions.json << EOF
{
  "pending": [],
  "approved": [],
  "rejected": [],
  "published": []
}
EOF

print_success "Created submission tracker"

# Create placeholder for assets
cat > marketplace/README.md << EOF
# Marketplace Assets

Place your marketplace assets in this directory:

## Required Assets

### Icon
- Size: 128x128 pixels
- Format: PNG
- File: \`icon.png\`

### Screenshots (at least 1, max 5)
- Size: 1280x800 pixels
- Format: PNG
- Files: \`screenshot1.png\`, \`screenshot2.png\`, etc.

### Promotional Image (optional)
- Size: 440x280 pixels
- Format: PNG
- File: \`promo.png\`

## Design Guidelines

- Use high-quality images
- Ensure text is readable
- Follow Google's branding guidelines
- Showcase key features
- Use consistent styling

## External Hosting

If using external URLs (recommended):
1. Upload assets to your CDN
2. Update URLs in \`marketplace-config.yaml\`
3. Ensure HTTPS is used
4. Test all URLs are accessible
EOF

print_success "Created asset directory with README"

# Summary and next steps
print_header "Setup Complete!"

cat << EOF
${GREEN}✓ Your repository is now configured for automated marketplace deployment!${NC}

${BOLD}Next Steps:${NC}

${YELLOW}1. Google Cloud Setup:${NC}
   • Create/select a GCP project
   • Create service account with Editor role
   • Generate and download JSON key
   • Enable required APIs

   Quick commands:
   ${BLUE}gcloud iam service-accounts create apps-script-publisher --display-name="Apps Script Publisher"
   gcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member="serviceAccount:apps-script-publisher@YOUR_PROJECT_ID.iam.gserviceaccount.com" --role="roles/editor"
   gcloud iam service-accounts keys create sa-key.json --iam-account=apps-script-publisher@YOUR_PROJECT_ID.iam.gserviceaccount.com${NC}

${YELLOW}2. GitHub Secrets:${NC}
   • Go to: Repository Settings > Secrets and variables > Actions
   • Add secret: GCP_SERVICE_ACCOUNT_KEY
   • Paste contents of sa-key.json

${YELLOW}3. Configure OAuth Consent:${NC}
   • Visit: https://console.cloud.google.com/apis/credentials/consent
   • Fill in app information
   • Add support email: ${SUPPORT_EMAIL}
   • Add privacy policy: ${PRIVACY_URL}
   • Add terms of service: ${TERMS_URL}
   • Verify your domain

${YELLOW}4. Link Apps Script to GCP:${NC}
   • Open: https://script.google.com/home/projects/${SCRIPT_ID}
   • Go to Project Settings
   • Enter your GCP Project Number
   • Click "Set Project"

${YELLOW}5. Update Configuration:${NC}
   • Edit marketplace-config.yaml:
     - Update asset URLs (currently placeholder)
     - Update description and tagline
     - Review all settings
   • Add your actual icon and screenshots to marketplace/

${YELLOW}6. Validate Setup:${NC}
   ${BLUE}python scripts/validate-setup.py${NC}

${YELLOW}7. Deploy:${NC}
   ${BLUE}git add .
   git commit -m "feat: setup marketplace automation"
   git push
   git tag v1.0.0
   git push origin v1.0.0${NC}

${BOLD}Files Created:${NC}
   • marketplace-config.yaml (main configuration)
   • .gitignore (updated)
   • README.md
   • requirements.txt
   • .marketplace-submissions.json
   • marketplace/README.md

${BOLD}Directories Created:${NC}
   • .github/workflows/
   • marketplace/
   • scripts/
   • templates/

${BOLD}Documentation:${NC}
   • Full setup guide: See workflow comments
   • Configuration reference: marketplace-config.yaml
   • Troubleshooting: Check workflow logs

${GREEN}Happy deploying! 🚀${NC}

EOF

# Ask if user wants to copy workflow files
read -p "Do you want workflow file templates created? (y/n): " CREATE_WORKFLOWS

if [[ "$CREATE_WORKFLOWS" =~ ^[Yy]$ ]]; then
    print_info "Please manually copy the workflow files:"
    print_info "  - deploy-marketplace.yml → .github/workflows/"
    print_info "  - monitor-approval.yml → .github/workflows/"
    print_info "These files are too large to generate in this script."
fi

print_success "Initialization complete!"